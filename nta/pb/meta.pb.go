// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/meta.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Duration is a wrapper around time.Duration which supports correct
// marshaling to YAML and JSON. In particular, it marshals into strings, which
// can be used as map keys in json.
type Duration struct {
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (m *Duration) String() string            { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

func (m *Duration) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion
// to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling
//
// +protobuf.options.(gogoproto.goproto_stringer)=false
type GroupVersionKind struct {
	Group   string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind    string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *GroupVersionKind) Reset()                    { *m = GroupVersionKind{} }
func (m *GroupVersionKind) String() string            { return proto.CompactTextString(m) }
func (*GroupVersionKind) ProtoMessage()               {}
func (*GroupVersionKind) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

func (m *GroupVersionKind) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GroupVersionKind) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GroupVersionKind) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

// Initializer is information about an initializer that has not yet completed.
type Initializer struct {
	// name of the process that is responsible for initializing this object.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Initializer) Reset()                    { *m = Initializer{} }
func (m *Initializer) String() string            { return proto.CompactTextString(m) }
func (*Initializer) ProtoMessage()               {}
func (*Initializer) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

func (m *Initializer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Initializers tracks the progress of initialization.
type Initializers struct {
	// Pending is a list of initializers that must execute in order before this object is visible.
	// When the last pending initializer is removed, and no failing result is set, the initializers
	// struct will be set to nil and the object is considered as initialized and visible to all
	// clients.
	// +patchMergeKey=name
	// +patchStrategy=merge
	Pending []*Initializer `protobuf:"bytes,1,rep,name=pending" json:"pending,omitempty"`
	// If result is set with the Failure field, the object will be persisted to storage and then deleted,
	// ensuring that other clients can observe the deletion.
	Result *Status `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *Initializers) Reset()                    { *m = Initializers{} }
func (m *Initializers) String() string            { return proto.CompactTextString(m) }
func (*Initializers) ProtoMessage()               {}
func (*Initializers) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{3} }

func (m *Initializers) GetPending() []*Initializer {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *Initializers) GetResult() *Status {
	if m != nil {
		return m.Result
	}
	return nil
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type LabelSelector struct {
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// +optional
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=matchLabels" json:"matchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	// +optional
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=matchExpressions" json:"matchExpressions,omitempty"`
}

func (m *LabelSelector) Reset()                    { *m = LabelSelector{} }
func (m *LabelSelector) String() string            { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()               {}
func (*LabelSelector) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{4} }

func (m *LabelSelector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func (m *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if m != nil {
		return m.MatchExpressions
	}
	return nil
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type LabelSelectorRequirement struct {
	// key is the label key that the selector applies to.
	// +patchMergeKey=key
	// +patchStrategy=merge
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	// +optional
	Values []string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *LabelSelectorRequirement) Reset()                    { *m = LabelSelectorRequirement{} }
func (m *LabelSelectorRequirement) String() string            { return proto.CompactTextString(m) }
func (*LabelSelectorRequirement) ProtoMessage()               {}
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{5} }

func (m *LabelSelectorRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelSelectorRequirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *LabelSelectorRequirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// List holds a list of objects, which may not be known by the server.
type List struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	// +optional
	Metadata *ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// List of objects
	// repeated k8s.io.apimachinery.pkg.runtime.RawExtension items = 2;
	Items []*RawExtension `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *List) Reset()                    { *m = List{} }
func (m *List) String() string            { return proto.CompactTextString(m) }
func (*List) ProtoMessage()               {}
func (*List) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{6} }

func (m *List) GetMetadata() *ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *List) GetItems() []*RawExtension {
	if m != nil {
		return m.Items
	}
	return nil
}

// ListMeta describes metadata that synthetic resources must have, including lists and
// various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// selfLink is a URL representing this object.
	// Populated by the system.
	// Read-only.
	// +optional
	SelfLink string `protobuf:"bytes,1,opt,name=selfLink,proto3" json:"selfLink,omitempty"`
	// String that identifies the server's internal version of this object that
	// can be used by clients to determine when objects have changed.
	// Value must be treated as opaque by clients and passed unmodified back to the server.
	// Populated by the system.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
	// +optional
	ResourceVersion string `protobuf:"bytes,2,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// continue may be set if the user set a limit on the number of items returned, and indicates that
	// the server has more data available. The value is opaque and may be used to issue another request
	// to the endpoint that served this list to retrieve the next set of available objects. Continuing a
	// list may not be possible if the server configuration has changed or more than a few minutes have
	// passed. The resourceVersion field returned when using this continue value will be identical to
	// the value in the first response.
	Continue string `protobuf:"bytes,3,opt,name=continue,proto3" json:"continue,omitempty"`
}

func (m *ListMeta) Reset()                    { *m = ListMeta{} }
func (m *ListMeta) String() string            { return proto.CompactTextString(m) }
func (*ListMeta) ProtoMessage()               {}
func (*ListMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{7} }

func (m *ListMeta) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *ListMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ListMeta) GetContinue() string {
	if m != nil {
		return m.Continue
	}
	return ""
}

// ListOptions is the query options to a standard REST list call.
type ListOptions struct {
	// A selector to restrict the list of returned objects by their labels.
	// Defaults to everything.
	// +optional
	LabelSelector string `protobuf:"bytes,1,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	// A selector to restrict the list of returned objects by their fields.
	// Defaults to everything.
	// +optional
	FieldSelector string `protobuf:"bytes,2,opt,name=fieldSelector,proto3" json:"fieldSelector,omitempty"`
	// If true, partially initialized resources are included in the response.
	// +optional
	IncludeUninitialized bool `protobuf:"varint,6,opt,name=includeUninitialized,proto3" json:"includeUninitialized,omitempty"`
	// Watch for changes to the described resources and return them as a stream of
	// add, update, and remove notifications. Specify resourceVersion.
	// +optional
	Watch bool `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	// When specified with a watch call, shows changes that occur after that particular version of a resource.
	// Defaults to changes from the beginning of history.
	// When specified for list:
	// - if unset, then the result is returned from remote storage based on quorum-read flag;
	// - if it's 0, then we simply return what we currently have in cache, no guarantee;
	// - if set to non zero, then the result is at least as fresh as given rv.
	// +optional
	ResourceVersion string `protobuf:"bytes,4,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// Timeout for the list/watch call.
	// This limits the duration of the call, regardless of any activity or inactivity.
	// +optional
	TimeoutSeconds int64 `protobuf:"varint,5,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	// limit is a maximum number of responses to return for a list call. If more items exist, the
	// server will set the `continue` field on the list metadata to a value that can be used with the
	// same initial query to retrieve the next set of results. Setting a limit may return fewer than
	// the requested amount of items (up to zero items) in the event all requested objects are
	// filtered out and clients should only use the presence of the continue field to determine whether
	// more results are available. Servers may choose not to support the limit argument and will return
	// all of the available results. If limit is specified and the continue field is empty, clients may
	// assume that no more results are available. This field is not supported if watch is true.
	//
	// The server guarantees that the objects returned when using continue will be identical to issuing
	// a single list call without a limit - that is, no objects created, modified, or deleted after the
	// first request is issued will be included in any subsequent continued requests. This is sometimes
	// referred to as a consistent snapshot, and ensures that a client that is using limit to receive
	// smaller chunks of a very large result can ensure they see all possible objects. If objects are
	// updated during a chunked list the version of the object that was present at the time the first list
	// result was calculated is returned.
	Limit int64 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// The continue option should be set when retrieving more results from the server. Since this value
	// is server defined, clients may only use the continue value from a previous query result with
	// identical query parameters (except for the value of continue) and the server may reject a continue
	// value it does not recognize. If the specified continue value is no longer valid whether due to
	// expiration (generally five to fifteen minutes) or a configuration change on the server the server
	// will respond with a 410 ResourceExpired error indicating the client must restart their list without
	// the continue field. This field is not supported when watch is true. Clients may start a watch from
	// the last resourceVersion value returned by the server and not miss any modifications.
	Continue string `protobuf:"bytes,8,opt,name=continue,proto3" json:"continue,omitempty"`
}

func (m *ListOptions) Reset()                    { *m = ListOptions{} }
func (m *ListOptions) String() string            { return proto.CompactTextString(m) }
func (*ListOptions) ProtoMessage()               {}
func (*ListOptions) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{8} }

func (m *ListOptions) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

func (m *ListOptions) GetFieldSelector() string {
	if m != nil {
		return m.FieldSelector
	}
	return ""
}

func (m *ListOptions) GetIncludeUninitialized() bool {
	if m != nil {
		return m.IncludeUninitialized
	}
	return false
}

func (m *ListOptions) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *ListOptions) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ListOptions) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *ListOptions) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOptions) GetContinue() string {
	if m != nil {
		return m.Continue
	}
	return ""
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
type ObjectMeta struct {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// GenerateName is an optional prefix, used by the server, to generate a unique
	// name ONLY IF the Name field has not been provided.
	// If this field is used, the name returned to the client will be different
	// than the name passed. This value will also be combined with a unique suffix.
	// The provided value has the same validation rules as the Name field,
	// and may be truncated by the length of the suffix required to make the value
	// unique on the server.
	//
	// If this field is specified and the generated name exists, the server will
	// NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
	// ServerTimeout indicating a unique name could not be found in the time allotted, and the client
	// should retry (optionally after the time indicated in the Retry-After header).
	//
	// Applied only if Name is not specified.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
	// +optional
	GenerateName string `protobuf:"bytes,2,opt,name=generateName,proto3" json:"generateName,omitempty"`
	// Namespace defines the space within each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/namespaces
	// +optional
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// SelfLink is a URL representing this object.
	// Populated by the system.
	// Read-only.
	// +optional
	SelfLink string `protobuf:"bytes,4,opt,name=selfLink,proto3" json:"selfLink,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	//
	// Populated by the system.
	// Read-only.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	// +optional
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system.
	// Read-only.
	// Value must be treated as opaque by clients and .
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
	// +optional
	ResourceVersion string `protobuf:"bytes,6,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	// A sequence number representing a specific generation of the desired state.
	// Populated by the system. Read-only.
	// +optional
	Generation int64 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system.
	// Read-only.
	// Null for lists.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	CreationTimestamp *Time `protobuf:"bytes,8,opt,name=creationTimestamp" json:"creationTimestamp,omitempty"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
	// field is set by the server when a graceful deletion is requested by the user, and is not
	// directly settable by a client. The resource is expected to be deleted (no longer visible
	// from resource lists, and not reachable by name) after the time in this field, once the
	// finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
	// Once the deletionTimestamp is set, this value may not be unset or be set further into the
	// future, although it may be shortened or the resource may be deleted prior to this time.
	// For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
	// by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
	// the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
	// remove the pod from the API. In the presence of network partitions, this object may still
	// exist after this timestamp, until an administrator or automated process can determine the
	// resource is fully terminated.
	// If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	DeletionTimestamp *Time `protobuf:"bytes,9,opt,name=deletionTimestamp" json:"deletionTimestamp,omitempty"`
	// Number of seconds allowed for this object to gracefully terminate before
	// it will be removed from the system. Only set when deletionTimestamp is also set.
	// May only be shortened.
	// Read-only.
	// +optional
	DeletionGracePeriodSeconds int64 `protobuf:"varint,10,opt,name=deletionGracePeriodSeconds,proto3" json:"deletionGracePeriodSeconds,omitempty"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	Annotations map[string]string `protobuf:"bytes,12,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of objects depended by this object. If ALL objects in the list have
	// been deleted, this object will be garbage collected. If this object is managed by a controller,
	// then an entry in this list will point to this controller, with the controller field set to true.
	// There cannot be more than one managing controller.
	// +optional
	// +patchMergeKey=uid
	// +patchStrategy=merge
	OwnerReferences []*OwnerReference `protobuf:"bytes,13,rep,name=ownerReferences" json:"ownerReferences,omitempty"`
	// An initializer is a controller which enforces some system invariant at object creation time.
	// This field is a list of initializers that have not yet acted on this object. If nil or empty,
	// this object has been completely initialized. Otherwise, the object is considered uninitialized
	// and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to
	// observe uninitialized objects.
	//
	// When an object is created, the system will populate this list with the current set of initializers.
	// Only privileged users may set or modify this list. Once it is empty, it may not be modified further
	// by any user.
	Initializers *Initializers `protobuf:"bytes,16,opt,name=initializers" json:"initializers,omitempty"`
	// Must be empty before the object is deleted from the registry. Each entry
	// is an identifier for the responsible component that will remove the entry
	// from the list. If the deletionTimestamp of the object is non-nil, entries
	// in this list can only be removed.
	// +optional
	// +patchStrategy=merge
	Finalizers []string `protobuf:"bytes,14,rep,name=finalizers" json:"finalizers,omitempty"`
	// The name of the cluster which the object belongs to.
	// This is used to distinguish resources with same name and namespace in different clusters.
	// This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	// +optional
	ClusterName string `protobuf:"bytes,15,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{9} }

func (m *ObjectMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectMeta) GetGenerateName() string {
	if m != nil {
		return m.GenerateName
	}
	return ""
}

func (m *ObjectMeta) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectMeta) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

func (m *ObjectMeta) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ObjectMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ObjectMeta) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *ObjectMeta) GetCreationTimestamp() *Time {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetDeletionTimestamp() *Time {
	if m != nil {
		return m.DeletionTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetDeletionGracePeriodSeconds() int64 {
	if m != nil {
		return m.DeletionGracePeriodSeconds
	}
	return 0
}

func (m *ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ObjectMeta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ObjectMeta) GetOwnerReferences() []*OwnerReference {
	if m != nil {
		return m.OwnerReferences
	}
	return nil
}

func (m *ObjectMeta) GetInitializers() *Initializers {
	if m != nil {
		return m.Initializers
	}
	return nil
}

func (m *ObjectMeta) GetFinalizers() []string {
	if m != nil {
		return m.Finalizers
	}
	return nil
}

func (m *ObjectMeta) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

// OwnerReference contains enough information to let you identify an owning
// object. Currently, an owning object must be in the same namespace, so there
// is no namespace field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion string `protobuf:"bytes,5,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind of the referent.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the referent.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// UID of the referent.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// If true, this reference points to the managing controller.
	// +optional
	Controller bool `protobuf:"varint,6,opt,name=controller,proto3" json:"controller,omitempty"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then
	// the owner cannot be deleted from the key-value store until this
	// reference is removed.
	// Defaults to false.
	// To set this field, a user needs "delete" permission of the owner,
	// otherwise 422 (Unprocessable Entity) will be returned.
	// +optional
	BlockOwnerDeletion bool `protobuf:"varint,7,opt,name=blockOwnerDeletion,proto3" json:"blockOwnerDeletion,omitempty"`
}

func (m *OwnerReference) Reset()                    { *m = OwnerReference{} }
func (m *OwnerReference) String() string            { return proto.CompactTextString(m) }
func (*OwnerReference) ProtoMessage()               {}
func (*OwnerReference) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{10} }

func (m *OwnerReference) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *OwnerReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *OwnerReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OwnerReference) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *OwnerReference) GetController() bool {
	if m != nil {
		return m.Controller
	}
	return false
}

func (m *OwnerReference) GetBlockOwnerDeletion() bool {
	if m != nil {
		return m.BlockOwnerDeletion
	}
	return false
}

// Status is a return value for calls that don't return other objects.
type Status struct {
	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	// +optional
	Metadata *ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Status of the operation.
	// One of: "Success" or "Failure".
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// A human-readable description of the status of this operation.
	// +optional
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// A machine-readable description of why this operation is in the
	// "Failure" status. If this value is empty there
	// is no information available. A Reason clarifies an HTTP status
	// code but does not override it.
	// +optional
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Extended data associated with the reason.  Each reason may define its
	// own extended details. This field is optional and the data returned
	// is not guaranteed to conform to any schema except that defined by
	// the reason type.
	// +optional
	Details *StatusDetails `protobuf:"bytes,5,opt,name=details" json:"details,omitempty"`
	// Suggested HTTP return code for this status, 0 if not set.
	// +optional
	Code int32 `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{11} }

func (m *Status) GetMetadata() *ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Status) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Status) GetDetails() *StatusDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// StatusCause provides more information about an api.Status failure, including
// cases when multiple errors are encountered.
type StatusCause struct {
	// A machine-readable description of the cause of the error. If this value is
	// empty there is no information available.
	// +optional
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// A human-readable description of the cause of the error.  This field may be
	// presented as-is to a reader.
	// +optional
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The field of the resource that has caused this error, as named by its JSON
	// serialization. May include dot and postfix notation for nested attributes.
	// Arrays are zero-indexed.  Fields may appear more than once in an array of
	// causes due to fields having multiple errors.
	// Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	// +optional
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (m *StatusCause) Reset()                    { *m = StatusCause{} }
func (m *StatusCause) String() string            { return proto.CompactTextString(m) }
func (*StatusCause) ProtoMessage()               {}
func (*StatusCause) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{12} }

func (m *StatusCause) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *StatusCause) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusCause) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

// StatusDetails is a set of additional properties that MAY be set by the
// server to provide additional information about a response. The Reason
// field of a Status object defines what attributes will be set. Clients
// must ignore fields that do not match the defined type of each attribute,
// and should assume that any attribute may be empty, invalid, or under
// defined.
type StatusDetails struct {
	// The name attribute of the resource associated with the status StatusReason
	// (when there is a single name which can be described).
	// +optional
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The group attribute of the resource associated with the status StatusReason.
	// +optional
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// The kind attribute of the resource associated with the status StatusReason.
	// On some operations may differ from the requested resource Kind.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
	// +optional
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// UID of the resource.
	// (when there is a single resource which can be described).
	// More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	// +optional
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// The Causes array includes more details associated with the StatusReason
	// failure. Not all StatusReasons may provide detailed causes.
	// +optional
	Causes []*StatusCause `protobuf:"bytes,4,rep,name=causes" json:"causes,omitempty"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate
	// the client must take an alternate action - for those errors this field may indicate how long to wait
	// before taking the alternate action.
	// +optional
	RetryAfterSeconds int32 `protobuf:"varint,5,opt,name=retryAfterSeconds,proto3" json:"retryAfterSeconds,omitempty"`
}

func (m *StatusDetails) Reset()                    { *m = StatusDetails{} }
func (m *StatusDetails) String() string            { return proto.CompactTextString(m) }
func (*StatusDetails) ProtoMessage()               {}
func (*StatusDetails) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{13} }

func (m *StatusDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusDetails) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *StatusDetails) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *StatusDetails) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *StatusDetails) GetCauses() []*StatusCause {
	if m != nil {
		return m.Causes
	}
	return nil
}

func (m *StatusDetails) GetRetryAfterSeconds() int32 {
	if m != nil {
		return m.RetryAfterSeconds
	}
	return 0
}

// Time is a wrapper around time.Time which supports correct
// marshaling to YAML and JSON.  Wrappers are provided for many
// of the factory methods that the time package offers.
//
// +protobuf.options.marshal=false
// +protobuf.as=Timestamp
// +protobuf.options.(gogoproto.goproto_stringer)=false
type Time struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive. This field may be limited in precision depending on context.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{14} }

func (m *Time) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Time) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterType((*Duration)(nil), "pb.Duration")
	proto.RegisterType((*GroupVersionKind)(nil), "pb.GroupVersionKind")
	proto.RegisterType((*Initializer)(nil), "pb.Initializer")
	proto.RegisterType((*Initializers)(nil), "pb.Initializers")
	proto.RegisterType((*LabelSelector)(nil), "pb.LabelSelector")
	proto.RegisterType((*LabelSelectorRequirement)(nil), "pb.LabelSelectorRequirement")
	proto.RegisterType((*List)(nil), "pb.List")
	proto.RegisterType((*ListMeta)(nil), "pb.ListMeta")
	proto.RegisterType((*ListOptions)(nil), "pb.ListOptions")
	proto.RegisterType((*ObjectMeta)(nil), "pb.ObjectMeta")
	proto.RegisterType((*OwnerReference)(nil), "pb.OwnerReference")
	proto.RegisterType((*Status)(nil), "pb.Status")
	proto.RegisterType((*StatusCause)(nil), "pb.StatusCause")
	proto.RegisterType((*StatusDetails)(nil), "pb.StatusDetails")
	proto.RegisterType((*Time)(nil), "pb.Time")
}

func init() { proto.RegisterFile("pb/meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 1051 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6b, 0x24, 0x45,
	0x10, 0x67, 0xf6, 0x63, 0xb2, 0xa9, 0xc9, 0xc7, 0xa6, 0x09, 0xc7, 0xb0, 0x1c, 0x67, 0x1c, 0x24,
	0xae, 0x28, 0x7b, 0xb0, 0xca, 0xa1, 0x22, 0x07, 0xc1, 0x84, 0x53, 0xcc, 0x79, 0xd2, 0xf1, 0x82,
	0x2f, 0x82, 0xbd, 0x33, 0x95, 0xd8, 0x66, 0xb6, 0x67, 0xec, 0xee, 0xb9, 0x5c, 0xfc, 0x87, 0x7c,
	0xf7, 0xc1, 0x07, 0xc1, 0xbf, 0xc5, 0x7f, 0x45, 0xfa, 0x63, 0x66, 0x67, 0x36, 0xab, 0x70, 0xf7,
	0xd6, 0x55, 0xf5, 0xab, 0xae, 0xef, 0xea, 0x86, 0xdd, 0x72, 0xf1, 0x78, 0x89, 0x9a, 0xcd, 0x4a,
	0x59, 0xe8, 0x82, 0xf4, 0xca, 0xc5, 0x64, 0x5c, 0x2e, 0x1e, 0xcb, 0x4a, 0x68, 0xbe, 0x44, 0xc7,
	0x4d, 0x8e, 0x61, 0x74, 0x5a, 0x49, 0xa6, 0x79, 0x21, 0xc8, 0x04, 0x46, 0x99, 0x3f, 0xc7, 0xc1,
	0x51, 0x30, 0xed, 0xd3, 0x86, 0x4e, 0x2e, 0x61, 0xfc, 0x4c, 0x16, 0x55, 0x79, 0x89, 0x52, 0xf1,
	0x42, 0x7c, 0xc3, 0x45, 0x46, 0x0e, 0x61, 0x78, 0x6d, 0x78, 0x16, 0xbc, 0x4d, 0x1d, 0x41, 0x62,
	0xd8, 0x7a, 0xe5, 0x40, 0x71, 0xcf, 0xf2, 0x6b, 0x92, 0x10, 0x18, 0xdc, 0x70, 0x91, 0xc5, 0x7d,
	0xcb, 0xb6, 0xe7, 0xe4, 0x5d, 0x88, 0xbe, 0x16, 0x5c, 0x73, 0x96, 0xf3, 0xdf, 0x50, 0x1a, 0x88,
	0x60, 0x4b, 0xf4, 0x37, 0xda, 0x73, 0xf2, 0x23, 0xec, 0xb4, 0x20, 0x8a, 0x7c, 0x00, 0x5b, 0x25,
	0x8a, 0x8c, 0x8b, 0xeb, 0x38, 0x38, 0xea, 0x4f, 0xa3, 0xf9, 0xfe, 0xac, 0x5c, 0xcc, 0x5a, 0x10,
	0x5a, 0xcb, 0x49, 0x02, 0xa1, 0x44, 0x55, 0xe5, 0xda, 0xba, 0x12, 0xcd, 0xc1, 0x20, 0x2f, 0x34,
	0xd3, 0x95, 0xa2, 0x5e, 0x92, 0xfc, 0x13, 0xc0, 0xee, 0x39, 0x5b, 0x60, 0x7e, 0x81, 0x39, 0xa6,
	0xba, 0x90, 0xe4, 0x14, 0xa2, 0x25, 0xd3, 0xe9, 0xcf, 0x96, 0xab, 0xbc, 0x91, 0xc4, 0xa8, 0x76,
	0x70, 0xb3, 0xe7, 0x2b, 0xd0, 0x99, 0xd0, 0xf2, 0x8e, 0xb6, 0xd5, 0xc8, 0x57, 0x30, 0xb6, 0xe4,
	0xd9, 0xeb, 0x52, 0xa2, 0x32, 0x09, 0x50, 0x71, 0xcf, 0x5e, 0xf5, 0xf0, 0xde, 0x55, 0x14, 0x7f,
	0xad, 0xb8, 0xc4, 0x25, 0x0a, 0x4d, 0xef, 0x69, 0x4d, 0x9e, 0xc2, 0x78, 0xdd, 0x14, 0x19, 0x43,
	0xff, 0x06, 0xef, 0x7c, 0x9e, 0xcc, 0xd1, 0x54, 0xe3, 0x15, 0xcb, 0x2b, 0xf4, 0x59, 0x77, 0xc4,
	0xe7, 0xbd, 0x4f, 0x83, 0xe4, 0x27, 0x88, 0xff, 0xcb, 0xda, 0x86, 0x7b, 0x26, 0x30, 0x2a, 0x4a,
	0x94, 0x4c, 0x17, 0xd2, 0x5f, 0xd5, 0xd0, 0xe4, 0x01, 0x84, 0xf6, 0x5a, 0x15, 0xf7, 0x8f, 0xfa,
	0xd3, 0x6d, 0xea, 0xa9, 0xe4, 0x07, 0x18, 0x9c, 0x73, 0xa5, 0xc9, 0x14, 0x46, 0xa6, 0xe3, 0x32,
	0xa6, 0x99, 0xbd, 0x32, 0x9a, 0xef, 0xd8, 0x58, 0xb9, 0xd2, 0xcf, 0x51, 0x33, 0xda, 0x48, 0xc9,
	0x31, 0x0c, 0xb9, 0xc6, 0x65, 0x9d, 0x92, 0xb1, 0x81, 0x51, 0x76, 0x7b, 0xf6, 0x5a, 0xa3, 0x30,
	0x51, 0x53, 0x27, 0x4e, 0x72, 0x18, 0xd5, 0xda, 0xc6, 0x33, 0x85, 0xf9, 0xd5, 0x39, 0x17, 0x37,
	0xde, 0xe1, 0x86, 0x26, 0x53, 0xd8, 0x97, 0xa8, 0x8a, 0x4a, 0xa6, 0x78, 0xd9, 0xe9, 0xbe, 0x75,
	0xb6, 0xb9, 0x25, 0x2d, 0x84, 0xe6, 0xa2, 0x42, 0xdf, 0x89, 0x0d, 0x9d, 0xfc, 0xde, 0x83, 0xc8,
	0x98, 0x7b, 0x51, 0x9a, 0xa6, 0x57, 0xe4, 0x3d, 0xd8, 0xcd, 0xdb, 0x99, 0xf3, 0x66, 0xbb, 0x4c,
	0x83, 0xba, 0xe2, 0x98, 0x67, 0x0d, 0xca, 0x59, 0xee, 0x32, 0xc9, 0x1c, 0x0e, 0xb9, 0x48, 0xf3,
	0x2a, 0xc3, 0x97, 0x82, 0x37, 0xcd, 0x9a, 0xc5, 0xe1, 0x51, 0x30, 0x1d, 0xd1, 0x8d, 0x32, 0x53,
	0xd3, 0x5b, 0x53, 0x79, 0xeb, 0xe8, 0x88, 0x3a, 0x62, 0x53, 0xac, 0x83, 0xcd, 0xb1, 0x1e, 0xc3,
	0x9e, 0x99, 0xf5, 0xa2, 0xd2, 0x17, 0x98, 0x16, 0x22, 0x53, 0xf1, 0xd0, 0xce, 0xf5, 0x1a, 0xd7,
	0xd8, 0xc9, 0xf9, 0x92, 0xeb, 0x78, 0xcb, 0x8a, 0x1d, 0xd1, 0xc9, 0xd4, 0x68, 0x2d, 0x53, 0x7f,
	0x84, 0x00, 0x2f, 0x16, 0xbf, 0x60, 0xea, 0x4a, 0xb3, 0x61, 0x6e, 0x49, 0x02, 0x3b, 0xd7, 0x28,
	0x4c, 0xe7, 0xe0, 0xb7, 0x46, 0xe6, 0xb2, 0xd2, 0xe1, 0x91, 0x87, 0xb0, 0x6d, 0xb0, 0xaa, 0x64,
	0x69, 0x5d, 0x8d, 0x15, 0xa3, 0x53, 0xf0, 0xc1, 0x5a, 0xc1, 0xc7, 0xd0, 0xaf, 0x78, 0x66, 0xe3,
	0xd9, 0xa6, 0xe6, 0xb8, 0x29, 0x2d, 0xe1, 0xe6, 0xb4, 0x3c, 0x02, 0xf0, 0x5e, 0x18, 0x90, 0x8b,
	0xb9, 0xc5, 0x21, 0x4f, 0xe0, 0x20, 0x95, 0x68, 0xcf, 0xdf, 0xf3, 0x25, 0x2a, 0xcd, 0x96, 0xa5,
	0xcd, 0x40, 0x34, 0x1f, 0x99, 0x46, 0x35, 0x4c, 0x7a, 0x1f, 0x62, 0xf4, 0x32, 0xcc, 0xb1, 0xab,
	0xb7, 0xbd, 0xae, 0x77, 0x0f, 0x42, 0x9e, 0xc2, 0xa4, 0x66, 0x3e, 0x93, 0x2c, 0xc5, 0xef, 0x50,
	0xf2, 0x22, 0xab, 0x4b, 0x06, 0xd6, 0xbf, 0xff, 0x41, 0x90, 0x39, 0x84, 0xb9, 0xdb, 0x55, 0x91,
	0x9d, 0xa6, 0x89, 0x31, 0xb6, 0xaa, 0xce, 0xac, 0xbd, 0xa3, 0x3c, 0x92, 0x9c, 0x40, 0xc4, 0x84,
	0x28, 0xb4, 0x0d, 0x41, 0xc5, 0x3b, 0x56, 0xf1, 0x9d, 0x35, 0xc5, 0x93, 0x15, 0xc2, 0x6f, 0xb8,
	0x96, 0x0e, 0xf9, 0x02, 0xf6, 0x8b, 0x5b, 0x81, 0x92, 0xe2, 0x15, 0x4a, 0x14, 0x29, 0xaa, 0x78,
	0xd7, 0x5e, 0x43, 0xec, 0x35, 0x1d, 0x11, 0x5d, 0x87, 0x92, 0x4f, 0x60, 0x87, 0xb7, 0xd6, 0x7a,
	0x3c, 0xb6, 0x79, 0x1a, 0xaf, 0xed, 0x72, 0x45, 0x3b, 0x28, 0x53, 0xba, 0x2b, 0x2e, 0x6a, 0x9d,
	0x3d, 0xbb, 0x85, 0x5a, 0x1c, 0x72, 0x04, 0x51, 0x9a, 0x57, 0x4a, 0xa3, 0xb4, 0x3d, 0xb7, 0x6f,
	0x1b, 0xa0, 0xcd, 0x9a, 0x7c, 0x06, 0xd1, 0x5b, 0x2e, 0x52, 0xb3, 0x88, 0xd7, 0x33, 0xf2, 0x46,
	0x8b, 0xf8, 0xaf, 0x00, 0xf6, 0xba, 0x69, 0x31, 0xf1, 0xb0, 0x92, 0xd7, 0xfd, 0xea, 0xba, 0xb9,
	0xc5, 0x69, 0xde, 0xcc, 0x60, 0xf5, 0x66, 0x36, 0xc3, 0xd6, 0x6f, 0x0d, 0x9b, 0x1f, 0x87, 0xc1,
	0x6a, 0x1c, 0x1e, 0x01, 0x98, 0x69, 0x95, 0x45, 0x9e, 0xa3, 0xf4, 0x5b, 0xa6, 0xc5, 0x21, 0x33,
	0x20, 0x8b, 0xbc, 0x48, 0x6f, 0xac, 0x43, 0xa7, 0xbe, 0xb9, 0xec, 0x30, 0x8c, 0xe8, 0x06, 0x49,
	0xf2, 0x77, 0x00, 0xa1, 0x7b, 0x3a, 0xdf, 0x60, 0xcd, 0x3f, 0x80, 0x50, 0x59, 0x1d, 0x9f, 0x0c,
	0x4f, 0x99, 0x4f, 0xc2, 0x12, 0x95, 0x62, 0xd7, 0x75, 0x14, 0x35, 0x69, 0x34, 0x24, 0x32, 0xd5,
	0xec, 0x34, 0x4f, 0x91, 0x0f, 0x61, 0x2b, 0x43, 0xcd, 0x78, 0xee, 0x76, 0x58, 0x34, 0x3f, 0x58,
	0xbd, 0xe5, 0xa7, 0x4e, 0x40, 0x6b, 0x84, 0xc9, 0x50, 0x5a, 0x64, 0x68, 0xa3, 0x1e, 0x52, 0x7b,
	0x4e, 0x5e, 0x42, 0xe4, 0xd0, 0x5f, 0xb2, 0x4a, 0xb5, 0xed, 0x04, 0x1d, 0x3b, 0x2d, 0xcf, 0x7a,
	0x5d, 0xcf, 0x0e, 0x61, 0x68, 0x37, 0xba, 0xf7, 0xd8, 0x11, 0xc9, 0x9f, 0x01, 0xec, 0x76, 0xbc,
	0xd8, 0xb8, 0x0b, 0x9b, 0xaf, 0x52, 0xaf, 0xfd, 0x55, 0xda, 0xf0, 0x21, 0xaa, 0x0b, 0x19, 0xae,
	0x0a, 0xf9, 0x3e, 0x84, 0xa9, 0x71, 0x59, 0xc5, 0x83, 0xd5, 0x77, 0xa7, 0x15, 0x0a, 0xf5, 0x62,
	0xf2, 0x11, 0x1c, 0x48, 0xd4, 0xf2, 0xee, 0xe4, 0x4a, 0xa3, 0x6c, 0x2f, 0xfc, 0x21, 0xbd, 0x2f,
	0x48, 0x9e, 0xc0, 0xc0, 0x6c, 0x20, 0x13, 0xb0, 0xf2, 0x58, 0xf7, 0xe9, 0xab, 0x49, 0xe3, 0xb4,
	0x60, 0xa2, 0x70, 0xb5, 0x1b, 0x52, 0x47, 0x2c, 0x42, 0xfb, 0x71, 0xfc, 0xf8, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xac, 0xa5, 0xcd, 0xf0, 0x5f, 0x0a, 0x00, 0x00,
}
