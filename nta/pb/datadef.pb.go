// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/datadef.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Recipient_ResourceScope int32

const (
	Recipient_Cluster    Recipient_ResourceScope = 0
	Recipient_Namespaced Recipient_ResourceScope = 1
)

var Recipient_ResourceScope_name = map[int32]string{
	0: "Cluster",
	1: "Namespaced",
}
var Recipient_ResourceScope_value = map[string]int32{
	"Cluster":    0,
	"Namespaced": 1,
}

func (x Recipient_ResourceScope) String() string {
	return proto.EnumName(Recipient_ResourceScope_name, int32(x))
}
func (Recipient_ResourceScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDatadef, []int{6, 0}
}

type AgentNode struct {
	Metadata *ListMeta        `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *AgentNodeSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *AgentNodeStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *AgentNode) Reset()                    { *m = AgentNode{} }
func (m *AgentNode) String() string            { return proto.CompactTextString(m) }
func (*AgentNode) ProtoMessage()               {}
func (*AgentNode) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{0} }

func (m *AgentNode) GetMetadata() *ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AgentNode) GetSpec() *AgentNodeSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *AgentNode) GetStatus() *AgentNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type AgentNodeSpec struct {
	Interfaces []string  `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
	Duration   *Duration `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
}

func (m *AgentNodeSpec) Reset()                    { *m = AgentNodeSpec{} }
func (m *AgentNodeSpec) String() string            { return proto.CompactTextString(m) }
func (*AgentNodeSpec) ProtoMessage()               {}
func (*AgentNodeSpec) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{1} }

func (m *AgentNodeSpec) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *AgentNodeSpec) GetDuration() *Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type AgentNodeStatus struct {
	Kubernetes *NodeStatus            `protobuf:"bytes,1,opt,name=kubernetes" json:"kubernetes,omitempty"`
	Docker     *DockerMachineStatus   `protobuf:"bytes,2,opt,name=docker" json:"docker,omitempty"`
	Openstack  *OpenStackNodeStatus   `protobuf:"bytes,3,opt,name=openstack" json:"openstack,omitempty"`
	Legacy     *PhysicalMachineStatus `protobuf:"bytes,4,opt,name=legacy" json:"legacy,omitempty"`
}

func (m *AgentNodeStatus) Reset()                    { *m = AgentNodeStatus{} }
func (m *AgentNodeStatus) String() string            { return proto.CompactTextString(m) }
func (*AgentNodeStatus) ProtoMessage()               {}
func (*AgentNodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{2} }

func (m *AgentNodeStatus) GetKubernetes() *NodeStatus {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *AgentNodeStatus) GetDocker() *DockerMachineStatus {
	if m != nil {
		return m.Docker
	}
	return nil
}

func (m *AgentNodeStatus) GetOpenstack() *OpenStackNodeStatus {
	if m != nil {
		return m.Openstack
	}
	return nil
}

func (m *AgentNodeStatus) GetLegacy() *PhysicalMachineStatus {
	if m != nil {
		return m.Legacy
	}
	return nil
}

type DockerMachineStatus struct {
	Capacity    map[string]*Quantity `protobuf:"bytes,1,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Allocatable map[string]*Quantity `protobuf:"bytes,2,rep,name=allocatable" json:"allocatable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Phase       string               `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Addresses   []*NodeAddress       `protobuf:"bytes,4,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *DockerMachineStatus) Reset()                    { *m = DockerMachineStatus{} }
func (m *DockerMachineStatus) String() string            { return proto.CompactTextString(m) }
func (*DockerMachineStatus) ProtoMessage()               {}
func (*DockerMachineStatus) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{3} }

func (m *DockerMachineStatus) GetCapacity() map[string]*Quantity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *DockerMachineStatus) GetAllocatable() map[string]*Quantity {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (m *DockerMachineStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *DockerMachineStatus) GetAddresses() []*NodeAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type OpenStackNodeStatus struct {
	Capacity    map[string]*Quantity `protobuf:"bytes,1,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Allocatable map[string]*Quantity `protobuf:"bytes,2,rep,name=allocatable" json:"allocatable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Phase       string               `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Addresses   []*NodeAddress       `protobuf:"bytes,4,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *OpenStackNodeStatus) Reset()                    { *m = OpenStackNodeStatus{} }
func (m *OpenStackNodeStatus) String() string            { return proto.CompactTextString(m) }
func (*OpenStackNodeStatus) ProtoMessage()               {}
func (*OpenStackNodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{4} }

func (m *OpenStackNodeStatus) GetCapacity() map[string]*Quantity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *OpenStackNodeStatus) GetAllocatable() map[string]*Quantity {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (m *OpenStackNodeStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *OpenStackNodeStatus) GetAddresses() []*NodeAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type PhysicalMachineStatus struct {
	Capacity    map[string]*Quantity `protobuf:"bytes,1,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Allocatable map[string]*Quantity `protobuf:"bytes,2,rep,name=allocatable" json:"allocatable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Phase       string               `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Addresses   []*NodeAddress       `protobuf:"bytes,4,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PhysicalMachineStatus) Reset()                    { *m = PhysicalMachineStatus{} }
func (m *PhysicalMachineStatus) String() string            { return proto.CompactTextString(m) }
func (*PhysicalMachineStatus) ProtoMessage()               {}
func (*PhysicalMachineStatus) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{5} }

func (m *PhysicalMachineStatus) GetCapacity() map[string]*Quantity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *PhysicalMachineStatus) GetAllocatable() map[string]*Quantity {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (m *PhysicalMachineStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *PhysicalMachineStatus) GetAddresses() []*NodeAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Recipient struct {
	Group         string                  `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version       string                  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Scope         string                  `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Plural        string                  `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
	Singular      string                  `protobuf:"bytes,5,opt,name=singular,proto3" json:"singular,omitempty"`
	Kind          string                  `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	ResourceScope Recipient_ResourceScope `protobuf:"varint,7,opt,name=resource_scope,json=resourceScope,proto3,enum=pb.Recipient_ResourceScope" json:"resource_scope,omitempty"`
}

func (m *Recipient) Reset()                    { *m = Recipient{} }
func (m *Recipient) String() string            { return proto.CompactTextString(m) }
func (*Recipient) ProtoMessage()               {}
func (*Recipient) Descriptor() ([]byte, []int) { return fileDescriptorDatadef, []int{6} }

func (m *Recipient) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Recipient) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Recipient) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Recipient) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

func (m *Recipient) GetSingular() string {
	if m != nil {
		return m.Singular
	}
	return ""
}

func (m *Recipient) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Recipient) GetResourceScope() Recipient_ResourceScope {
	if m != nil {
		return m.ResourceScope
	}
	return Recipient_Cluster
}

func init() {
	proto.RegisterType((*AgentNode)(nil), "pb.AgentNode")
	proto.RegisterType((*AgentNodeSpec)(nil), "pb.AgentNodeSpec")
	proto.RegisterType((*AgentNodeStatus)(nil), "pb.AgentNodeStatus")
	proto.RegisterType((*DockerMachineStatus)(nil), "pb.DockerMachineStatus")
	proto.RegisterType((*OpenStackNodeStatus)(nil), "pb.OpenStackNodeStatus")
	proto.RegisterType((*PhysicalMachineStatus)(nil), "pb.PhysicalMachineStatus")
	proto.RegisterType((*Recipient)(nil), "pb.Recipient")
	proto.RegisterEnum("pb.Recipient_ResourceScope", Recipient_ResourceScope_name, Recipient_ResourceScope_value)
}

func init() { proto.RegisterFile("pb/datadef.proto", fileDescriptorDatadef) }

var fileDescriptorDatadef = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x49, 0x9a, 0xd6, 0x13, 0x92, 0xa6, 0x5b, 0x3e, 0x4c, 0x90, 0x50, 0x15, 0xa9, 0x22,
	0xe2, 0x23, 0x11, 0x45, 0x48, 0x88, 0x5b, 0x28, 0x1c, 0x40, 0x6d, 0x81, 0xed, 0x89, 0x13, 0x5a,
	0xaf, 0xa7, 0xa9, 0x15, 0x77, 0xbd, 0xda, 0x5d, 0x57, 0xca, 0x95, 0x13, 0x88, 0xbf, 0xc8, 0x8f,
	0x41, 0xbb, 0x76, 0x5c, 0xa7, 0xc4, 0x97, 0x5e, 0x7b, 0xcb, 0x9b, 0x79, 0xf3, 0xe6, 0xed, 0xbe,
	0xd8, 0x86, 0xbe, 0x0c, 0x27, 0x11, 0x33, 0x2c, 0xc2, 0xb3, 0xb1, 0x54, 0xa9, 0x49, 0x49, 0x43,
	0x86, 0x83, 0xae, 0x0c, 0x27, 0x17, 0x68, 0x58, 0x5e, 0x72, 0x50, 0xa4, 0x11, 0x16, 0x70, 0x47,
	0x86, 0x13, 0x85, 0x3a, 0xcd, 0x14, 0x2f, 0x4a, 0xc3, 0xdf, 0x1e, 0xf8, 0xd3, 0x19, 0x0a, 0x73,
	0x92, 0x46, 0x48, 0x46, 0xb0, 0x65, 0xa7, 0xad, 0x6e, 0xe0, 0xed, 0x79, 0xa3, 0xce, 0xc1, 0xdd,
	0xb1, 0x0c, 0xc7, 0x47, 0xb1, 0x36, 0xc7, 0x68, 0x18, 0x2d, 0xbb, 0x64, 0x1f, 0x5a, 0x5a, 0x22,
	0x0f, 0x1a, 0x8e, 0xb5, 0x63, 0x59, 0xa5, 0xcc, 0xa9, 0x44, 0x4e, 0x5d, 0x9b, 0x3c, 0x87, 0xb6,
	0x36, 0xcc, 0x64, 0x3a, 0x68, 0x3a, 0xe2, 0xee, 0x2a, 0xd1, 0xb5, 0x68, 0x41, 0x19, 0x7e, 0x87,
	0xee, 0x8a, 0x06, 0x79, 0x02, 0x10, 0x0b, 0x83, 0xea, 0x8c, 0x71, 0xd4, 0x81, 0xb7, 0xd7, 0x1c,
	0xf9, 0xb4, 0x52, 0xb1, 0x76, 0xa3, 0x4c, 0x31, 0x13, 0xa7, 0xa2, 0x30, 0xe2, 0xec, 0x7e, 0x28,
	0x6a, 0xb4, 0xec, 0x0e, 0xff, 0x7a, 0xb0, 0x7d, 0x6d, 0x2d, 0x19, 0x03, 0xcc, 0xb3, 0x10, 0x95,
	0x40, 0xe3, 0xd4, 0xed, 0x7c, 0xcf, 0xce, 0x57, 0xac, 0x55, 0x18, 0x64, 0x02, 0xed, 0x28, 0xe5,
	0x73, 0x54, 0xc5, 0xae, 0x87, 0x6e, 0x97, 0xab, 0x1c, 0x33, 0x7e, 0x1e, 0x8b, 0xf2, 0x3c, 0x39,
	0x8d, 0xbc, 0x01, 0x3f, 0x95, 0x28, 0xb4, 0x61, 0x7c, 0x5e, 0x9c, 0xdf, 0xcd, 0x7c, 0x91, 0x28,
	0x4e, 0x6d, 0xb1, 0xb2, 0xe8, 0x8a, 0x49, 0x5e, 0x41, 0x3b, 0xc1, 0x19, 0xe3, 0x8b, 0xa0, 0xe5,
	0x66, 0x1e, 0xd9, 0x99, 0xaf, 0xe7, 0x0b, 0x1d, 0x73, 0x96, 0x5c, 0xdb, 0x94, 0x13, 0x87, 0x3f,
	0x9b, 0xb0, 0xbb, 0xc6, 0x09, 0x99, 0xc2, 0x16, 0x67, 0x92, 0xf1, 0xd8, 0x2c, 0xdc, 0xf5, 0x75,
	0x0e, 0xf6, 0x6b, 0x4c, 0x8f, 0x0f, 0x0b, 0xde, 0x47, 0x61, 0xd4, 0x82, 0x96, 0x63, 0xe4, 0x33,
	0x74, 0x58, 0x92, 0xa4, 0x9c, 0x19, 0x16, 0x26, 0x18, 0x34, 0x9c, 0xca, 0xa8, 0x4e, 0x65, 0x7a,
	0x45, 0xcd, 0x85, 0xaa, 0xc3, 0xe4, 0x1e, 0x6c, 0xc8, 0x73, 0xa6, 0xd1, 0x5d, 0x86, 0x4f, 0x73,
	0x40, 0x5e, 0x82, 0xcf, 0xa2, 0x48, 0xa1, 0xd6, 0xa8, 0x83, 0x96, 0xd3, 0xdf, 0x5e, 0xc6, 0x30,
	0xcd, 0x1b, 0xf4, 0x8a, 0x31, 0xf8, 0x04, 0xdd, 0x15, 0xaf, 0xa4, 0x0f, 0xcd, 0x39, 0x2e, 0x5c,
	0x80, 0x3e, 0xb5, 0x3f, 0xc9, 0x10, 0x36, 0x2e, 0x59, 0x92, 0x61, 0xf5, 0x4f, 0xf1, 0x2d, 0x63,
	0xc2, 0xc4, 0x66, 0x41, 0xf3, 0xd6, 0xbb, 0xc6, 0x5b, 0x6f, 0x70, 0x04, 0xfd, 0xeb, 0x86, 0x6f,
	0xae, 0xe6, 0x42, 0x58, 0x13, 0x6d, 0x5d, 0x08, 0x6b, 0xa8, 0x37, 0x08, 0x61, 0x9d, 0xca, 0x6d,
	0x0e, 0xe1, 0x57, 0x13, 0xee, 0xaf, 0x7d, 0x56, 0xc8, 0xe1, 0x7f, 0x31, 0x3c, 0xad, 0x7d, 0xb0,
	0x6a, 0x83, 0x38, 0x5a, 0x17, 0xc4, 0xb3, 0x7a, 0x9d, 0xdb, 0x1c, 0xc5, 0x9f, 0x06, 0xf8, 0x14,
	0x79, 0x2c, 0x63, 0x14, 0xc6, 0x9e, 0x75, 0xa6, 0xd2, 0x4c, 0x16, 0x4a, 0x39, 0x20, 0x01, 0x6c,
	0x5e, 0xa2, 0xd2, 0xcb, 0x17, 0xb8, 0x4f, 0x97, 0xd0, 0xf2, 0x35, 0x4f, 0x65, 0x79, 0x37, 0x0e,
	0x90, 0x07, 0xd0, 0x96, 0x49, 0xa6, 0x58, 0xe2, 0xde, 0x8d, 0x3e, 0x2d, 0x10, 0x19, 0xc0, 0x96,
	0x8e, 0xc5, 0x2c, 0x4b, 0x98, 0x0a, 0x36, 0x5c, 0xa7, 0xc4, 0x84, 0x40, 0x6b, 0x1e, 0x8b, 0x28,
	0x68, 0xbb, 0xba, 0xfb, 0x4d, 0xde, 0x43, 0x6f, 0xf9, 0x21, 0xfc, 0x91, 0xaf, 0xd9, 0xdc, 0xf3,
	0x46, 0xbd, 0x83, 0xc7, 0xf6, 0x30, 0xa5, 0xe9, 0x31, 0x2d, 0x38, 0xa7, 0x96, 0x42, 0xbb, 0xaa,
	0x0a, 0x87, 0x2f, 0xa0, 0xbb, 0xd2, 0x27, 0x1d, 0xd8, 0x3c, 0x4c, 0x32, 0x6d, 0x50, 0xf5, 0xef,
	0x90, 0x1e, 0xc0, 0x09, 0xbb, 0x40, 0x2d, 0x19, 0xc7, 0xa8, 0xef, 0x85, 0x6d, 0xf7, 0xbd, 0x7d,
	0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x15, 0x42, 0xc0, 0xb5, 0xb8, 0x07, 0x00, 0x00,
}
