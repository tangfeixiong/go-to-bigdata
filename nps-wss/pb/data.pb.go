// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/data.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Destination struct {
	IpV4 string `protobuf:"bytes,1,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	Port int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Destination) Reset()                    { *m = Destination{} }
func (m *Destination) String() string            { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()               {}
func (*Destination) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

func (m *Destination) GetIpV4() string {
	if m != nil {
		return m.IpV4
	}
	return ""
}

func (m *Destination) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Link struct {
	Stages map[string]*Link_Stage `protobuf:"bytes,1,rep,name=stages" json:"stages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{1} }

func (m *Link) GetStages() map[string]*Link_Stage {
	if m != nil {
		return m.Stages
	}
	return nil
}

type Link_Stage struct {
	Target  *Destination   `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Sources []*Destination `protobuf:"bytes,2,rep,name=sources" json:"sources,omitempty"`
}

func (m *Link_Stage) Reset()                    { *m = Link_Stage{} }
func (m *Link_Stage) String() string            { return proto.CompactTextString(m) }
func (*Link_Stage) ProtoMessage()               {}
func (*Link_Stage) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{1, 0} }

func (m *Link_Stage) GetTarget() *Destination {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Link_Stage) GetSources() []*Destination {
	if m != nil {
		return m.Sources
	}
	return nil
}

type XLStats struct {
	Command    string         `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Attackdata *XLStats_Stats `protobuf:"bytes,2,opt,name=attackdata" json:"attackdata,omitempty"`
}

func (m *XLStats) Reset()                    { *m = XLStats{} }
func (m *XLStats) String() string            { return proto.CompactTextString(m) }
func (*XLStats) ProtoMessage()               {}
func (*XLStats) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{2} }

func (m *XLStats) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *XLStats) GetAttackdata() *XLStats_Stats {
	if m != nil {
		return m.Attackdata
	}
	return nil
}

type XLStats_Stat struct {
	From       string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To         string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	AttackType string `protobuf:"bytes,3,opt,name=attack_type,json=attackType,proto3" json:"attack_type,omitempty"`
	AttackName string `protobuf:"bytes,4,opt,name=attack_name,json=attackName,proto3" json:"attack_name,omitempty"`
	Time       int32  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Data       string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	DataSize   int32  `protobuf:"varint,7,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	Port       int32  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	Protocol   string `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *XLStats_Stat) Reset()                    { *m = XLStats_Stat{} }
func (m *XLStats_Stat) String() string            { return proto.CompactTextString(m) }
func (*XLStats_Stat) ProtoMessage()               {}
func (*XLStats_Stat) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{2, 0} }

func (m *XLStats_Stat) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *XLStats_Stat) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *XLStats_Stat) GetAttackType() string {
	if m != nil {
		return m.AttackType
	}
	return ""
}

func (m *XLStats_Stat) GetAttackName() string {
	if m != nil {
		return m.AttackName
	}
	return ""
}

func (m *XLStats_Stat) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XLStats_Stat) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *XLStats_Stat) GetDataSize() int32 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *XLStats_Stat) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *XLStats_Stat) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type XLStats_Stats struct {
	List []*XLStats_Stat `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *XLStats_Stats) Reset()                    { *m = XLStats_Stats{} }
func (m *XLStats_Stats) String() string            { return proto.CompactTextString(m) }
func (*XLStats_Stats) ProtoMessage()               {}
func (*XLStats_Stats) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{2, 1} }

func (m *XLStats_Stats) GetList() []*XLStats_Stat {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Destination)(nil), "pb.Destination")
	proto.RegisterType((*Link)(nil), "pb.Link")
	proto.RegisterType((*Link_Stage)(nil), "pb.Link.Stage")
	proto.RegisterType((*XLStats)(nil), "pb.XLStats")
	proto.RegisterType((*XLStats_Stat)(nil), "pb.XLStats.Stat")
	proto.RegisterType((*XLStats_Stats)(nil), "pb.XLStats.Stats")
}

func init() { proto.RegisterFile("pb/data.proto", fileDescriptorData) }

var fileDescriptorData = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x25, 0x99, 0x64, 0x3e, 0x2a, 0xb8, 0xae, 0xa5, 0x87, 0x26, 0x1e, 0x1c, 0x86, 0x05, 0x47,
	0xd0, 0x88, 0xeb, 0x22, 0xe2, 0x59, 0x0f, 0xc2, 0xe2, 0xa1, 0x47, 0x44, 0xf0, 0x30, 0xf4, 0xcc,
	0xb6, 0x4b, 0x33, 0x93, 0x74, 0x93, 0xae, 0x5d, 0xc8, 0xfe, 0x56, 0x2f, 0x1e, 0xfd, 0x17, 0xd2,
	0x35, 0x9d, 0x31, 0xea, 0x25, 0xa9, 0xae, 0xf7, 0xea, 0xbd, 0xea, 0xaa, 0x86, 0x7b, 0x6e, 0xf3,
	0xf2, 0x4a, 0x91, 0xaa, 0x5c, 0x6b, 0xc9, 0x62, 0xea, 0x36, 0x8b, 0x37, 0x50, 0xbc, 0xd7, 0x9e,
	0x4c, 0xa3, 0xc8, 0xd8, 0x06, 0x1f, 0x42, 0x6e, 0xdc, 0xfa, 0xf6, 0x42, 0x24, 0xf3, 0x64, 0x39,
	0x93, 0x99, 0x71, 0x5f, 0x2e, 0x10, 0x21, 0x73, 0xb6, 0x25, 0x91, 0xcf, 0x93, 0x65, 0x2e, 0x39,
	0x5e, 0xfc, 0x48, 0x20, 0xbb, 0x34, 0xcd, 0x0e, 0x9f, 0xc3, 0xd8, 0x93, 0xba, 0xd6, 0x5e, 0x24,
	0xf3, 0xd1, 0xb2, 0x38, 0x7f, 0x54, 0xb9, 0x4d, 0x15, 0x90, 0x6a, 0xc5, 0xe9, 0x0f, 0x0d, 0xb5,
	0x9d, 0x8c, 0x9c, 0xf2, 0x1b, 0xe4, 0x9c, 0xc6, 0xa7, 0x30, 0x26, 0xd5, 0x5e, 0x6b, 0x62, 0xa7,
	0xe2, 0xfc, 0x7e, 0x28, 0x1b, 0x74, 0x22, 0x23, 0x8c, 0xcf, 0x60, 0xe2, 0xed, 0x4d, 0xbb, 0xd5,
	0x5e, 0xa4, 0x6c, 0xf0, 0x1f, 0xb3, 0xc7, 0xcb, 0x8f, 0x50, 0x0c, 0x3c, 0xf1, 0x14, 0x46, 0x3b,
	0xdd, 0xc5, 0x9b, 0x84, 0x10, 0xcf, 0x20, 0xbf, 0x55, 0xfb, 0x1b, 0x2d, 0x52, 0xf6, 0x3c, 0xf9,
	0xbb, 0x55, 0x79, 0x00, 0xdf, 0xa5, 0x6f, 0x93, 0xc5, 0xaf, 0x14, 0x26, 0x5f, 0x2f, 0x57, 0xa4,
	0xc8, 0xa3, 0x80, 0xc9, 0xd6, 0xd6, 0xb5, 0x6a, 0xae, 0xa2, 0x56, 0x7f, 0xc4, 0x57, 0x00, 0x8a,
	0x48, 0x6d, 0x77, 0x61, 0xa8, 0x51, 0xf4, 0x41, 0x10, 0x8d, 0xa5, 0x15, 0x7f, 0xe5, 0x80, 0x54,
	0xfe, 0x4c, 0x20, 0x0b, 0xd9, 0x30, 0xd4, 0xef, 0xad, 0xad, 0xfb, 0x41, 0x87, 0x18, 0x4f, 0x20,
	0x25, 0xcb, 0x3a, 0x33, 0x99, 0x92, 0xc5, 0x27, 0x50, 0x1c, 0x4a, 0xd7, 0xd4, 0x39, 0x2d, 0x46,
	0x0c, 0x44, 0xb5, 0xcf, 0x9d, 0xd3, 0x03, 0x42, 0xa3, 0x6a, 0x2d, 0xb2, 0x21, 0xe1, 0x93, 0xaa,
	0x75, 0x70, 0x21, 0x53, 0xeb, 0x7e, 0x75, 0x21, 0x0e, 0x39, 0xee, 0x77, 0x7c, 0x70, 0x0e, 0x31,
	0x3e, 0x86, 0x59, 0xf8, 0xaf, 0xbd, 0xb9, 0xd3, 0x62, 0xc2, 0xe4, 0x69, 0x48, 0xac, 0xcc, 0x9d,
	0x3e, 0xee, 0x7f, 0xfa, 0x67, 0xff, 0x58, 0xc2, 0x94, 0x1f, 0xd1, 0xd6, 0xee, 0xc5, 0x8c, 0x85,
	0x8e, 0xe7, 0xf2, 0x05, 0x2f, 0x99, 0x3c, 0x9e, 0x41, 0xb6, 0x37, 0x9e, 0xe2, 0xcb, 0x38, 0xfd,
	0x77, 0x32, 0x92, 0xd1, 0xcd, 0x98, 0x0b, 0x5f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x01,
	0x0b, 0xb5, 0x9e, 0x02, 0x00, 0x00,
}
